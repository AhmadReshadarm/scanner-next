import { styled } from '@mui/material/styles';
import Tooltip, { TooltipProps, tooltipClasses } from '@mui/material/Tooltip';
import { openErrorNotification } from 'common/helpers';
import { openSuccessNotification } from 'common/helpers/openSuccessNotidication.helper';
import color from 'components/store/lib/ui.colors';
import { ChangeUserPswService } from 'swagger/services';

const InputsTooltip = styled(({ className, ...props }: TooltipProps) => (
  <Tooltip {...props} classes={{ popper: className }} />
))(({ theme }) => ({
  [`& .${tooltipClasses.tooltip}`]: {
    backgroundColor: color.textPrimary,
    color: color.btnPrimary,
    maxWidth: 200,
    fontSize: theme.typography.pxToRem(14),
    boxShadow: `0px 2px 6px ${color.boxShadowBtn}`,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'flex-start',
    gap: '10px',
    borderRadius: '15px',
    padding: '15px',
    userSelect: 'none',
  },
}));

const handleChangePsw = async ({ user, psw, repeatPsw, oldPassword }) => {
  if (psw != repeatPsw) {
    openErrorNotification('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç');
    return;
  }
  try {
    await ChangeUserPswService.changePassword({
      userId: user.id,
      body: { password: psw, oldPassword },
    });
    openSuccessNotification('–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω');
  } catch (error: any) {
    switch (true) {
      case 500 == error.response.status || error.response.status > 500:
        openErrorNotification(
          '–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å üòî, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –Ω–∞—à–∏–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏',
        );
        break;
      case 429 == error.response.status:
        openErrorNotification(
          '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞',
        );
        break;
      case 401 == error.response.status:
        openErrorNotification('–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç');
        break;
      case 403 == error.response.status:
        openErrorNotification('–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω: –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞');
        break;
      case 409 == error.response.status:
        openErrorNotification(
          '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π',
        );
        break;
      case 404 == error.response.status:
        openErrorNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        break;
      default:
        openErrorNotification(
          '–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å üòî, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –Ω–∞—à–∏–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏',
        );
        break;
    }
  }
};

export { InputsTooltip, handleChangePsw };
